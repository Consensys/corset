use std::format;

pub fn to_str(opcode: u8) -> String {
    match opcode {
        0x0 => "STOP".to_string(),
        0x1 => "ADD".to_string(),
        0x2 => "MUL".to_string(),
        0x3 => "SUB".to_string(),
        0x4 => "DIV".to_string(),
        0x5 => "SDIV".to_string(),
        0x6 => "MOD".to_string(),
        0x7 => "SMOD".to_string(),
        0x8 => "ADDMOD".to_string(),
        0x9 => "MULMOD".to_string(),
        0xa => "EXP".to_string(),
        0xb => "SGNEXTND".to_string(),
        0x10 => "LT".to_string(),
        0x11 => "GT".to_string(),
        0x12 => "SLT".to_string(),
        0x13 => "SGT".to_string(),
        0x14 => "EQ".to_string(),
        0x15 => "ISZERO".to_string(),
        0x16 => "AND".to_string(),
        0x17 => "OR".to_string(),
        0x18 => "XOR".to_string(),
        0x19 => "NOT".to_string(),
        0x1a => "BYTE".to_string(),
        0x1b => "SHL".to_string(),
        0x1c => "SHR".to_string(),
        0x1d => "SAR".to_string(),
        0x20 => "SHA3".to_string(),
        0x30 => "ADDRESS".to_string(),
        0x31 => "BALANCE".to_string(),
        0x32 => "ORIGIN".to_string(),
        0x33 => "CALLER".to_string(),
        0x34 => "CALLVALUE".to_string(),
        0x35 => "CALLDATALD".to_string(),
        0x36 => "CALLDATASZ".to_string(),
        0x37 => "CALLDATACPY".to_string(),
        0x38 => "CODESZ".to_string(),
        0x39 => "CODECPY".to_string(),
        0x3a => "GASPRICE".to_string(),
        0x3b => "EXTCODESZ".to_string(),
        0x3c => "EXTCODECPY".to_string(),
        0x3d => "RETURNDATASZ".to_string(),
        0x3e => "RETURNDATACPY".to_string(),
        0x3f => "EXTCODEHASH".to_string(),
        0x40 => "BLOCKHASH".to_string(),
        0x41 => "COINBASE".to_string(),
        0x42 => "TIMESTAMP".to_string(),
        0x43 => "NUMBER".to_string(),
        0x44 => "PREVRANDAO".to_string(),
        0x45 => "GASLIMIT".to_string(),
        0x46 => "CHAINID".to_string(),
        0x47 => "SELFBALANCE".to_string(),
        0x48 => "BASEFEE".to_string(),
        0x50 => "POP".to_string(),
        0x51 => "MLOAD".to_string(),
        0x52 => "MSTORE".to_string(),
        0x53 => "MSTORE8".to_string(),
        0x54 => "SLOAD".to_string(),
        0x55 => "SSTORE".to_string(),
        0x56 => "JUMP".to_string(),
        0x57 => "JUMPI".to_string(),
        0x58 => "PC".to_string(),
        0x59 => "MSIZE".to_string(),
        0x5a => "GAS".to_string(),
        0x5b => "JUMPDEST".to_string(),
        0x5f..=0x7f => format!("PUSH{}", opcode - 0x5f),
        0x80..=0x8f => format!("DUP{}", opcode - 0x80 + 1),
        0x90..=0x9f => format!("SWAP{}", opcode - 0x90 + 1),
        0xa0..=0xa4 => format!("LOG{}", opcode - 0xa0),
        0xf0 => "CREATE".to_string(),
        0xf1 => "CALL".to_string(),
        0xf2 => "CALLCODE".to_string(),
        0xf3 => "RETURN".to_string(),
        0xf4 => "DELEGATECALL".to_string(),
        0xf5 => "CREATE2".to_string(),
        0xfa => "STATICCALL".to_string(),
        0xfd => "REVERT".to_string(),
        0xfe => "INVALID".to_string(),
        0xff => "SELFDESTRUCT".to_string(),
        _ => "???".to_string(),
    }
}
